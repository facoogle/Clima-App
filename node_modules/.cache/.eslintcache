[{"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\index.js":"1","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\containers\\App.js":"2","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\Nav.jsx":"3","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\Cards.jsx":"4","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\HomeCard.jsx":"5","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\About.jsx":"6","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\Card.jsx":"7","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\SearchBar.jsx":"8","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\City.jsx":"9"},{"size":376,"mtime":1654276001000,"results":"10","hashOfConfig":"11"},{"size":3563,"mtime":1656596312993,"results":"12","hashOfConfig":"11"},{"size":589,"mtime":1656458106293,"results":"13","hashOfConfig":"11"},{"size":404,"mtime":1654276001000,"results":"14","hashOfConfig":"11"},{"size":841,"mtime":1656513848770,"results":"15","hashOfConfig":"11"},{"size":256,"mtime":1656514245378,"results":"16","hashOfConfig":"11"},{"size":1012,"mtime":1656597106155,"results":"17","hashOfConfig":"11"},{"size":1892,"mtime":1656684052862,"results":"18","hashOfConfig":"11"},{"size":513,"mtime":1654276001000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"11yiybx",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\index.js",[],["40","41"],"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\containers\\App.js",["42"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\n// importo los componentes About y City\nimport About from '../components/About';\nimport City from '../components/City';\nimport HomeCard from '../components/HomeCard.jsx';\nimport axios from 'axios'\nimport { Route } from 'react-router-dom';\n\nconst apiKey = '6a9b9651318ede2644e620f696ebfaf1';\n\n\n\n\n\n\n\nfunction App() {\n  \n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [temperature, setTemperature] = useState(0);\n\n  const savePositionState = (position)=>{\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  }\n\nconst fetchCity = async () => {\n  try {\n     window.navigator.geolocation.getCurrentPosition(savePositionState);\n    const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=60d505bb48f9c02e8d1f29a621cd125f&units=metric&lang=es`)\n    setTemperature(\n      {name: res.data.name,\n       temp: res.data.main.temp,\n       temp_min: res.data.main.temp_min,\n       temp_max: res.data.main.temp_max,\n       pressure: res.data.main.pressure,\n       humidity: res.data.main.humidity,\n       description: res.data.weather[0].description,\n       icon: res.data.weather[0].icon,\n       feels: res.data.main.feels_like\n      }\n       \n       \n      )\n    \n  } catch (error) {\n    console.log(error)\n  }\n}\n//console.log(temperature)\nuseEffect(() => {\n  fetchCity();\n}, [latitude,longitude]);\n\n\n  \n\n  const [cities, setCities] = useState([]);\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  \n  \n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n  }\n  \n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n    if(ciudad.length > 0) {\n        return ciudad[0];\n    } else {\n        return null;\n    }\n  }\n  const rosario = \"rosario\"\n  const buenosaires = \"buenos aires\"\n  const cordoba = \"cordoba\"\n  \n  \n  \n \n\n\n  useEffect(() => {\n    onSearch(rosario);\n    onSearch(buenosaires);\n    onSearch(cordoba)\n    \n    \n  }, []); \n\n  \n\n\n\n  \n  return (\n    <div className=\"App\">\n      <Route path='/' render={() => <Nav onSearch={onSearch}/>} fetchCity = {fetchCity} />\n      <Route path='/about' component={About}/>\n      <Route exact path='/' render={() =>  <HomeCard temperature= {temperature}/> }/>\n      <Route exact path='/' render={() =>  <Cards cities={cities} onClose={onClose} /> }/>\n      <Route exact path='/ciudad/:ciudadId' \n             render={({match}) => (<City city={onFilter(match.params.ciudadId)}/>)}/>\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\Nav.jsx",[],"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\Cards.jsx",[],"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\HomeCard.jsx",[],"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\About.jsx",[],"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\Card.jsx",[],"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\SearchBar.jsx",[],"C:\\Users\\facun\\OneDrive\\Escritorio\\09-React-Routing\\clima-app\\src\\components\\City.jsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":57,"column":4,"nodeType":"49","endLine":57,"endColumn":24,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCity'. Either include it or remove the dependency array.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [fetchCity, latitude, longitude]",{"range":"56","text":"57"},[1575,1595],"[fetchCity, latitude, longitude]"]